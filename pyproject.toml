[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project]
name = "miadbviz"
version = "0.0.1"
description = "Short Description TODO"
authors = [
    {name = "Sarah Szwarc", email = "sarah.szwarc@universite-paris-saclay.fr"},
]
requires-python = "<3.12.0,>=3.11.0"
keywords = [
    "knowledgeExtraction",
    "spectralInformation",
    "queryingSystem",
]
classifiers = [
    "Development Status :: 1 - Planning",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Framework :: Pytest",
    "Framework :: tox",
    "Framework :: Sphinx",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3 :: Only",
]
license = {text = "LICENSE"}
readme = "README.rst"

dependencies = [
    "click<9.0.0,>=8.2.1",
    "gensim<5.0.0,>=4.3.2",
    "matchms<1.0.0,>=0.27.0", # blocked because of gensim
    "matplotlib<4.0.0,>=3.7.2",
    "ms2deepscore<3.0.0,>=2.5.0", # blocked because of gensim
    "numpy<2.0.0,>=1.26.4",
    "openpyxl<4.0.0,>=3.1.5",
    "pandas<3.0.0,>=2.2.3",
    "rdkit<2025.0.0,>=2024.9.4", # blocked because of matchms
    "scipy==1.11.0", # blocked because of gensim
    "seaborn<1.0.0,>=0.13.2",
    "spec2vec<1.0.0,>=0.8.0",
]

[options.entry_points]
console_scripts = "mia-visualization = mia-visualization.cli:main"

[options.packages.find]
where = "src"

[options.package_data]
miadbviz = "data/.*"

[project.urls]
homepage = "https://github.com/spectra-to-knowledge/miadb-visualization"
repository = "https://github.com/spectra-to-knowledge/miadb-visualization"
documentation = "https://github.com/spectra-to-knowledge/miadb-visualization"

[project.scripts]
mia-visualization = "mia-visualization.cli:main"


[dependency-groups]
dev = [
    "deptry>=0.23.0",
    "mkdocs>=1.4.2",
    "mkdocs-material>=9.6.15",
    "mkdocstrings[python]>=0.30.0",
    "mypy>=1.17.0",
    "pre-commit>=2.20.0",
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.4",
    "tox-uv>=1.26.2",
    "types-requests>=2.32.4.20250611",
]

[tool.mypy]
files = ["miadbviz"]
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true
ignore_missing_imports = true

[tool.pytest.ini_options]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]
pythonpath = [
  "miadbviz"
]
testpaths = [
    "tests"
]

[tool.ruff]
target-version = "py311"
line-length = 120
fix = true

[tool.ruff.lint]
select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E", "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",
]
ignore = [
    # LineTooLong
    "E501",
    # DoNotAssignLambda
    "E731",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.ruff.format]
preview = true

[tool.coverage.report]
skip_empty = true

[tool.coverage.run]
branch = true
source = ["miadbviz"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
force-single-line = true
lines-between-types = 1
lines-after-imports = 2
